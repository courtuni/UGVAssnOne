#include "LaserData.hpp"
#include "Camera.hpp"
#include "Vehicle.hpp"
#include "HUD.hpp"

#ifdef __APPLE__
#include <OpenGL/gl.h>
#include <OpenGL/glu.h>
#include <GLUT/glut.h>
#include <unistd.h>
#elif defined(WIN32)
#include <Windows.h>
#include <tchar.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>

#pragma warning(disable : 4996)
#else
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <unistd.h>
#endif

#include <stdio.h>
#include <math.h>

#include <map>

#define DEGTORAD (3.141592765 / 180.0)

void LaserData::drawLines() {

	int x[] = { 336, 214, -204, 139, -351, 355, -144, 252, -60, 10, 340, -305, 357, 155, -316, 295, -212, 129, -207, -322, 209, -236, 327, 221, 105, -94, -214, -220, 154, -181, -192, -168, -139, 2, -230, -201, 178, -148, 225, 142, 248, 206, 110, -282, 166, 14, 130, -331, 71, 176, -59, -352, -277, -29, -221, -344, -137, 332, 256, 302, 211, -160, 274, -329, -182, 316, 42, 131, 162, 222, 66, 181, -327, -243, -86, -234, -62, -176, -169, -310, -87, -145, -67, -112, 203, -285, 127, 134, -266, 23, 306, 5, 16, 101, 164, 204, 273, -90, -132, 243, 70, -217, 237, -346, 12, -125, 292, -226, -272, -294, 50, -249, -215, -114, -246, -31, 111, 60, 83, -256, 331, 147, 347, -337, -6, -8, 251, -190, 249, 156, 338, -308, -260, 114, 40, -231, 72, -53, 285, -33, -323, -48, 356, 112, -257, 257, 51, -303, 335, -271, 321, 68, 244, 281, 172, -255, 65, -295, -325, -171, 307, -273, 33, -293, 200, -69, 78, 45, 218, 116, -154, 247, 44, -194, -109, -335, 189, -185, 350, -239, -240, 77, -63, 263, -150, -47, 151, 234, -278, -18, -195, 55, -35, -37, -10, 27, 102, 97, 138, -288, 121, 328, 266, -237, 304, 317, 74, 150, 79, -359, -11, 21, -81, -50, 109, 140, 286, 323, -158, 61, -178, -138, 195, -159, -287, -279, -51, -106, 217, -58, 153, -72, -16, 39, 298, -3, -302, -172, -55, -224, 87, -268, 48, -141, 279, 58, 311, -343, -317, -151, 32, -297, 34, -120, 57, -111, 6, 290, 95, -299, 275, -96, -170, -45, -263, 124, 201, 99, -283, -131, 228, -75, -156, -321, -340, 215, 17, 278, 163, -238, 342, -105, -196, -64, 152, 326, 54, -166, 136, -298, 208, -173, -334, 20, -128, 280, 177, 312, -174, 325, 100, -126, -193, -14, 91, 346, -82, -183, -54, 146, -76, -328, -199, -73, 158, 174, -211, -2, -103, -326, 19, -213, 161, 213, 36, -79, 339, -118, -349, -262, -198, -200, -130, 259, 84, -189, 264, -235, 126, -85, 88, 80, -119, -247, -1, 183, 210, -267, -40, 348, -312, -26, 96, -300, 233, -354, 190, 353, -84, 103, -13 };
	int y[] = { 342, -106, -138, 257, -177, 351, -8, -62, -82, -337, 322, 133, -17, 186, -353, 97, 67, -246, -7, -50, -128, -139, -357, 244, -207, 301, 29, 94, -253, -152, -59, 17, 248, 230, -115, -216, -188, -225, 306, -286, -195, 25, -315, -171, 57, 148, -33, -137, 197, 127, 359, -234, -331, 262, 279, -301, 242, 217, 223, -21, 101, 139, 286, 211, 310, 212, -282, -164, -338, -93, -343, -275, 59, -96, -319, 85, -44, -312, 130, -358, -355, 308, -254, -34, -304, 140, 299, -267, 195, -339, -46, -4, 78, -39, -51, -328, 150, -279, -160, -218, -344, -211, 159, -190, 88, -192, 20, 345, -191, -131, 22, -16, 164, -9, 107, 81, -19, 43, -98, -71, -3, -320, 185, 354, -255, -230, -214, -336, -132, -148, 304, -242, 163, 58, 162, -156, 171, -325, 343, 128, 303, -276, -120, 125, 50, -169, -58, 219, -81, -85, 69, -289, -291, -245, -69, -199, -61, 347, 229, 254, -251, -308, -243, 169, -217, -340, -263, -224, 246, -274, 40, 41, -35, -56, -36, -165, 21, 319, 126, 334, -172, -314, 283, -77, 331, 314, -159, -238, -200, 12, 3, 52, -64, 121, -288, 79, 226, -354, -296, -168, -268, -215, -352, 210, -264, 251, -28, -318, 68, -175, 90, 1, 324, -244, 291, -52, 157, 167, 252, -346, -163, 103, 187, -348, -103, -101, 36, 313, 119, -223, -97, -220, -123, -37, 24, 341, -79, -78, -54, 352, 259, 39, 339, 147, -119, 284, 13, -208, 98, -63, -113, -68, 202, -341, 117, 266, 296, 129, -110, 360, -206, 263, -322, 112, 109, 232, 153, -116, -40, -117, -65, -74, -193, 231, 353, -180, 93, -292, -232, 200, -310, -270, 95, 220, 227, 196, -293, 189, -60, 80, 178, -45, -203, -212, -130, 19, -1, -151, -142, 258, 191, 100, 73, -266, -269, -94, -259, 350, 273, -30, -317, 46, -294, 118, -100, -11, 14, 156, -194, 173, 358, -248, 292, -91, -114, -265, 174, -25, -170, 71, 77, -133, -261, -124, 154, 108, 6, -6, 182, -26, 208, -226, 320, 278, -229, 30, 74, -280, 311, -53, 120, 168, 49, 356, -105, -150, -135, -134, 253, 243, 315 };
	int z[] = { -342, -135, -74, -253, -30, 242, 201, 158, 161, 350, 20, 80, 54, 291, 59, 49, 4, -23, -203, 333, -41, -75, -115, 227, 344, -5, -196, -238, -195, -7, 327, -176, 79, 294, 6, 331, 148, 264, -66, 260, 211, 75, 226, -260, -85, 218, -346, 359, -244, -350, -166, 233, 67, -10, 9, -240, 124, 299, -202, -16, -114, 38, -60, 27, -207, -143, -152, 66, -65, -294, 179, -172, -228, -91, 73, 256, -13, 104, 25, 78, 71, 229, -282, -270, -211, 128, -18, 167, 88, 250, -277, -19, 7, 194, 102, 163, -220, 301, -34, 39, 287, 280, 175, -216, -284, -335, 263, -345, 64, 94, 101, 192, 203, -88, 342, 18, 243, -9, -24, -117, -303, -230, 35, -300, 245, 41, 5, -354, 352, 16, 43, -271, -69, -279, 193, -317, -243, -205, -262, -90, -280, -217, 244, 306, 212, -332, -163, -64, -231, 241, 240, 302, -311, -246, -39, -101, -3, 17, 190, -183, 283, -325, 360, 10, -192, -242, 19, -29, 0, 357, -348, 209, 109, 155, -290, -147, -182, -224, -237, 115, 170, -160, 131, -214, -239, 99, 205, -204, -118, 348, -51, 30, -15, 119, 50, 224, 13, 69, -187, -349, 337, -103, -272, 185, 197, -306, 133, -79, 89, -170, 215, -227, -359, 42, -136, -134, -94, -6, 139, -221, 81, 110, -353, 345, -59, 147, -273, -291, -169, 199, -164, 262, 221, 162, 47, -185, -210, 208, 130, -42, -191, 22, 52, -263, -56, 26, -20, -316, 107, -259, -288, -52, -193, -105, -292, -333, 325, 125, 28, -269, -222, -186, -21, 316, 276, -96, 182, 269, -360, 114, -296, -38, 55, -145, -302, -329, 141, 11, 150, -285, 106, 176, -295, 169, 117, 159, 142, -167, -110, 282, 126, 97, 108, -336, -155, 284, 62, 85, 251, -352, 202, 34, 189, -158, -307, 103, 23, -337, 154, -251, 183, 68, -178, -36, -257, -44, -171, -268, 200, 296, 322, 177, 29, -223, 113, 93, -127, -73, -340, 90, 247, 135, 77, -252, -328, 267, 137, 307, -122, -125, 329, 279, -226, -266, -315, -49, 310, -137, 313, -283, -168, 317, -200, 347, -321, 56, -43, 207, 298, -274, 95 };

	const double centerR = -90;
	const double startR = centerR - 50;
	const double endR = centerR + 50;

	double r = 4;

	double r1 = r;

	// this seems to control length?
	double r2 = r * 4;

	// these are the lines from the gauge
	glBegin(GL_LINES);
	for (double ang = startR; ang <= endR; ang += (endR - startR) * 0.125 * .5) {
		double x = cos(ang * DEGTORAD);
		double y = sin(ang * DEGTORAD);

		glVertex2f(r1 * x, r1 * y);
		glVertex2f(r2 * x, r2 * y);
	}
	glEnd();

	//// let's try a point?
	//glBegin(GL_POINTS);
	//glVertex2f(0, 0);
	//glEnd();

	// let's try other points
	glBegin(GL_POINTS);
	for (int i = 0; i <= 1000; i++) {
		glVertex3f(i*2, 1, i);
	}
	
	glEnd();
}
void LaserData::draw() {
	glPushMatrix();
	double x = 2;
	double y = 3;
	double r = 4;
	double min = 0.2;
	double max = 7;
	double val = 3;
	const char* label = "nice";
	const char* minLabel = "min";
	const char* maxLabel = "max";

	double r1 = r;
	double r2 = r * 1.05;

	const double centerR = -90;
	const double startR = centerR - 50;
	const double endR = centerR + 50;

	glTranslatef(x, y, 0);
	glDisable(GL_LIGHTING);

	y = sin((startR)*DEGTORAD);

	double valPos = ((val - min) / (max - min));
	valPos = (valPos * (endR - startR)) + startR;
	if (valPos < startR)
		valPos = startR;
	else if (valPos > endR)
		valPos = endR;
	//else
	//	valPos = (int) (valPos*2.0)/2.0;

	// draw the bar
	double barW = 20;
	r1 -= 6;
	r2 += 3;
	glColor3f(1, 0, 1);
	glBegin(GL_QUADS);
	double x1 = cos((valPos - barW) * DEGTORAD);
	double y1 = sin((valPos - barW) * DEGTORAD);
	double x2 = cos((valPos + barW) * DEGTORAD);
	double y2 = sin((valPos + barW) * DEGTORAD);
	glVertex2f(r1 * x1, r1 * y1);
	glVertex2f(r1 * x2, r1 * y2);
	glVertex2f(r2 * x2, r2 * y2);
	glVertex2f(r2 * x1, r2 * y1);
	glEnd();



	glPopMatrix();
}